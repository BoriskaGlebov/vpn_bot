from typing import TYPE_CHECKING

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.utils.chat_action import ChatActionSender
from sqlalchemy.ext.asyncio import AsyncSession

from bot.config import bot
from bot.database import connection
from bot.users.dao import UserDAO
from bot.users.schemas import SUserTelegramID

if TYPE_CHECKING:
    pass
vpn_router = Router()


# class VPNStates(StatesGroup):
#     """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è vpn-router."""
#
#     pass


class VPNRouter:
    """–†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ VPN."""

    def __init__(self) -> None:
        self.router = Router(name="vpn_router")
        self._register_handlers()

    def _register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤."""
        self.router.message.register(
            self.get_config_amnezia_vpn,
            F.text.contains("üîë –ü–æ–ª—É—á–∏—Ç—å VPN-–∫–æ–Ω—Ñ–∏–≥ AmneziaVPN"),
        )
        self.router.message.register(
            self.get_config_amnezia_wg,
            F.text.contains("üåê –ü–æ–ª—É—á–∏—Ç—å VPN-–∫–æ–Ω—Ñ–∏–≥ AmneziaWG"),
        )
        self.router.message.register(
            self.check_subscription,
            F.text.contains("üìà –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"),
        )

    @staticmethod
    async def get_config_amnezia_vpn(message: Message, state: FSMContext) -> None:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ AmneziaVPN."""
        async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
            await message.answer(
                "–ù–∞ —Å–≤–æ–π –∫–æ–Ω—Ñ–∏–≥ amneziaVPN", reply_markup=ReplyKeyboardRemove()
            )
            await state.clear()

    @staticmethod
    async def get_config_amnezia_wg(message: Message, state: FSMContext) -> None:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ AmneziaWG."""
        async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
            await message.answer(
                "–ù–∞ —Å–≤–æ–π –∫–æ–Ω—Ñ–∏–≥ amneziaWG", reply_markup=ReplyKeyboardRemove()
            )
            await state.clear()

    @staticmethod
    @connection()
    async def check_subscription(
        message: Message, session: AsyncSession, state: FSMContext
    ) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
            s_user = SUserTelegramID(telegram_id=message.from_user.id)
            user = await UserDAO.find_one_or_none(session=session, filters=s_user)
            if user is None:
                raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {s_user.telegram_id}")

            await message.answer(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏", reply_markup=ReplyKeyboardRemove()
            )

            text = (
                f"‚úÖ {user.subscription}"
                if user.subscription.is_active
                else f"üîí {user.subscription}"
            )

            await bot.send_message(chat_id=message.from_user.id, text=text)
            await state.clear()


#
# @vpn_router.message(F.text.contains("üîë –ü–æ–ª—É—á–∏—Ç—å VPN-–∫–æ–Ω—Ñ–∏–≥ AmneziaVPN"))  # type: ignore[misc]
# async def get_config_amnezia_vpn(message: Message, state: FSMContext) -> None:
#     """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª amnezia_vpn."""
#     async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
#         await message.answer(
#             "–ù–∞ —Å–≤–æ–π –∫–æ–Ω—Ñ–∏–≥ amneziaVPN", reply_markup=ReplyKeyboardRemove()
#         )
#         await state.clear()
#
#
# @vpn_router.message(F.text.contains("üåê –ü–æ–ª—É—á–∏—Ç—å VPN-–∫–æ–Ω—Ñ–∏–≥ AmneziaWG"))  # type: ignore[misc]
# async def get_config_amnezia_wg(message: Message, state: FSMContext) -> None:
#     """–ü–æ–ª—å–∑–≤–æ–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –∫–æ–Ω—Ñ–∏–≥ Amnezia WG."""
#     async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
#         await message.answer(
#             "–ù–∞ —Å–≤–æ–π –∫–æ–Ω—Ñ–∏–≥ amneziaWG", reply_markup=ReplyKeyboardRemove()
#         )
#         await state.clear()
#
#
# @vpn_router.message(F.text.contains("üìà –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"))  # type: ignore[misc]
# @connection()
# async def check_subscription(
#     message: Message, session: AsyncSession, state: FSMContext
# ) -> None:
#     """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
#     async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
#         s_user = SUserTelegramID(telegram_id=message.from_user.id)
#         user = await UserDAO.find_one_or_none(session=session, filters=s_user)
#         if user is None:
#             raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {s_user.telegram_id} ")
#         await message.answer(
#             "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏", reply_markup=ReplyKeyboardRemove()
#         )
#         if user.subscription.is_active:
#             text = f"‚úÖ {user.subscription}"
#         else:
#             text = f"üîí {user.subscription}"
#
#         await bot.send_message(chat_id=message.from_user.id, text=text)
#         await state.clear()
