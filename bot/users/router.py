import asyncio
from typing import Any

from admin.keyboards.inline_kb import admin_user_control_kb
from aiogram import F
from aiogram.dispatcher.router import Router
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.utils.chat_action import ChatActionSender
from sqlalchemy.ext.asyncio import AsyncSession
from utils.start_stop_bot import send_to_admins

from bot.config import bot, logger, settings_bot
from bot.database import connection
from bot.users.dao import UserDAO
from bot.users.keyboards.markup_kb import main_kb
from bot.users.schemas import SRole, SUser, SUserTelegramID

m_admin = settings_bot.MESSAGES["modes"]["admin"]
m_start = settings_bot.MESSAGES["modes"]["start"]
m_error = settings_bot.MESSAGES["errors"]
m_echo = settings_bot.MESSAGES["general"]["echo"]

user_router = Router()


class UserStates(StatesGroup):  # type: ignore[misc]
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –±–æ—Ç–∞.

    Attributes
        press_start (State): –°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ä—Ç".
        press_admin (State): –°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å".

    """

    press_start: State = State()
    press_admin: State = State()


@user_router.message(CommandStart())  # type: ignore[misc]
@connection()
async def cmd_start(
    message: Message,
    command: CommandObject,
    session: AsyncSession,
    state: FSMContext,
    **kwargs: Any,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –ë–î, –Ω–∞–∑–Ω–∞—á–∞–µ—Ç —Ä–æ–ª—å User –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ Telegram, –≤—ã–∑–≤–∞–≤—à–µ–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
        command (CommandObject): –û–±—ä–µ–∫—Ç –∫–æ–º–∞–Ω–¥—ã Telegram.
        session (Any): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ë–î (AsyncSession).
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        **kwargs (Any): –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.

    Returns
        None

    """
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        schema_telegram_id = SUserTelegramID(telegram_id=message.chat.id)
        await state.clear()
        user_info = await UserDAO.find_one_or_none(
            session=session, filters=schema_telegram_id
        )
        welcome_messages = m_start["welcome"]
        if user_info:
            response_message = welcome_messages["again"][0].format(
                username=message.from_user.full_name
                or message.from_user.username
                or "–ì–æ—Å—Ç—å"
            )
            follow_up_message = welcome_messages["again"][1]

            await message.answer(response_message, reply_markup=ReplyKeyboardRemove())
            await message.answer(
                follow_up_message,
                reply_markup=main_kb(
                    active_subscription=user_info.subscription.is_active,
                    user_telegram_id=message.from_user.id,
                ),
            )
        else:
            schema_user = SUser(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
            )
            if schema_user.telegram_id in settings_bot.ADMIN_IDS:
                schema_role = SRole(name="admin")
            else:
                schema_role = SRole(name="user")
            new_user = await UserDAO.add_role_subscription(
                session=session, values_user=schema_user, values_role=schema_role
            )
            response_message = welcome_messages["first"][0].format(
                username=message.from_user.full_name
                or message.from_user.username
                or "–ì–æ—Å—Ç—å"
            )
            follow_up_message = welcome_messages["first"][1]
            await message.answer(response_message, reply_markup=ReplyKeyboardRemove())
            await message.answer(
                follow_up_message,
                reply_markup=main_kb(
                    active_subscription=new_user.subscription.is_active,
                    user_telegram_id=message.from_user.id,
                ),
            )
            if schema_user.telegram_id not in settings_bot.ADMIN_IDS:
                admin_message = m_admin["new_registration"].format(
                    first_name=new_user.first_name or "‚Äî",
                    last_name=new_user.last_name or "",
                    username=new_user.username or "‚Äî",
                    telegram_id=new_user.telegram_id,
                    roles=", ".join(role.name for role in new_user.roles),
                    subscription=str(new_user.subscription),
                )
                await send_to_admins(
                    bot=bot,
                    message_text=admin_message,
                    reply_markup=admin_user_control_kb(message.from_user.id),
                )
        await state.set_state(UserStates.press_start)


@user_router.message(Command("admin"))  # type: ignore[misc]
async def admin_start(
    message: Message, session: AsyncSession, state: FSMContext, **kwargs: Any
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–æ—Å—Ç—É–ø–∞.
    –ï—Å–ª–∏ –∞–¥–º–∏–Ω ‚Äî –æ—á–∏—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ `press_admin`.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        **kwargs (Any): –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –Ω–æ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã).

    Returns
        None

    """
    await state.clear()

    if message.from_user.id not in settings_bot.ADMIN_IDS:
        await message.answer(
            text=m_admin.get("off", "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!"),
            reply_markup=ReplyKeyboardRemove(),
        )
        await bot.send_message(
            text=m_error.get("admin_only", "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!"),
            reply_markup=ReplyKeyboardRemove(),
            chat_id=message.chat.id,
        )
        return

    await bot.send_message(
        chat_id=message.from_user.id,
        text=m_admin.get("on", "–ö–∞–∂–∏—Å—å –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!"),
        reply_markup=ReplyKeyboardRemove(),
    )

    await state.set_state(UserStates.press_admin)


@user_router.message(
    UserStates.press_admin,
    ~F.text.startswith("/")
    & ~(
        F.text.contains("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å") | F.text.contains("‚ùì –ü–æ–º–æ—â—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN")
    ),
)  # type: ignore[misc]
@user_router.message(
    UserStates.press_start,
    ~F.text.startswith("/")
    & ~(
        F.text.contains("üîë –ü–æ–ª—É—á–∏—Ç—å VPN-–∫–æ–Ω—Ñ–∏–≥ AmneziaVPN")
        | F.text.contains("üåê –ü–æ–ª—É—á–∏—Ç—å VPN-–∫–æ–Ω—Ñ–∏–≥ AmneziaWG")
        | F.text.contains("üìà –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏")
        | F.text.contains("‚ùì –ü–æ–º–æ—â—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN")
        | F.text.contains("üí∞ –í—ã–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É VPN-Boriska")
    ),
)  # type: ignore[misc]
async def mistake_handler_user(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–æ–∫, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª—è–µ—Ç—Å—è,
    –∏ –±–æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state (FSMContext): –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns
        None

    """
    try:
        await asyncio.sleep(2)
        await message.delete()
    except Exception as e:
        logger.error(e)
        pass

    current_state = await state.get_state()
    state_me = current_state.split(":")[1] if current_state else None
    if state_me == "press_start":
        answer_text = m_error["unknown_command"]
    else:
        answer_text = m_error["unknown_command_admin"]
    await message.answer(text=answer_text)
