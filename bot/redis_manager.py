import json
from typing import Any, cast

from redis.asyncio import Redis

from bot.config import logger, settings_db


class SettingsRedis:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–Ω–µ FSM."""

    def __init__(self, redis_url: str) -> None:
        self.url = redis_url
        self.client: Redis | None = None

    async def connect(self) -> Redis:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis."""
        if self.client is None:
            self.client = Redis.from_url(self.url, decode_responses=True)
            try:
                await self.client.ping()
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
        return self.client

    async def disconnect(self) -> None:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis."""
        if self.client:
            await self.client.close()
            logger.info("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –∑–∞–∫—Ä—ã—Ç–æ")
            self.client = None

    async def _ensure_connection(self) -> Redis:
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis."""
        if self.client is None:
            logger.warning("Redis-–∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
            await self.connect()
        assert self.client is not None
        return self.client

    async def get(self, key: str) -> str | None:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É."""
        redis = await self._ensure_connection()
        value = await redis.get(key)
        return cast(str | None, value)

    async def set(self, key: str, value: str, expire: int | None = None) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É."""
        redis = await self._ensure_connection()
        await redis.set(key, value, ex=expire)

    async def delete(self, key: str) -> None:
        """–£–¥–∞–ª—è–µ—Ç –∫–ª—é—á –∏–∑ Redis."""
        redis = await self._ensure_connection()
        await redis.delete(key)

    async def save_admin_message(
        self, user_id: int, admin_id: int, message_id: int
    ) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        redis = await self._ensure_connection()
        key = f"admin_messages:{user_id}"
        existing = await redis.get(key)
        messages: list[dict[str, Any]] = json.loads(existing) if existing else []
        messages.append({"chat_id": admin_id, "message_id": message_id})
        await redis.set(key, json.dumps(messages))

    async def get_admin_messages(self, user_id: int) -> list[dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        redis = await self._ensure_connection()
        key = f"admin_messages:{user_id}"
        data = await redis.get(key)
        return json.loads(data) if data else []

    async def clear_admin_messages(self, user_id: int) -> None:
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
        redis = await self._ensure_connection()
        key = f"admin_messages:{user_id}"
        await redis.delete(key)
        logger.debug(f"üóëÔ∏è –û—á–∏—â–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è user_id={user_id}")


redis_manager = SettingsRedis(str(settings_db.REDIS_URL))
