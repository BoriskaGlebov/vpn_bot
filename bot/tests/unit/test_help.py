import asyncio
from types import SimpleNamespace
from unittest.mock import ANY, AsyncMock, MagicMock, patch

import pytest
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, Message

from bot.help.keyboards.inline_kb import device_keyboard
from bot.help.router import HelpStates, device_cb, help_cmd
from bot.help.utils.android_device import AndroidDevice
from bot.help.utils.iphone_device import IphoneDevice
from bot.help.utils.pc_device import PCDevice
from bot.help.utils.tv_device import TVDevice


@pytest.mark.asyncio
async def test_help_cmd(monkeypatch, fake_bot, fake_state):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ help_cmd –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å—Ç–∞–≤–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM."""

    # --- Arrange ---
    message = AsyncMock(spec=Message)
    message.chat = MagicMock()
    message.chat.id = 111
    message.answer = AsyncMock()
    # state = AsyncMock()
    m_help = {
        "start_block": [
            "–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "–í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        ]
    }

    # –ü–æ–¥–º–µ–Ω—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏ router.py
    monkeypatch.setattr("bot.help.router.m_help", m_help)
    monkeypatch.setattr("bot.help.router.bot", fake_bot)

    # ChatActionSender.typing ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    fake_ctx = AsyncMock()
    fake_ctx.__aenter__.return_value = None
    fake_ctx.__aexit__.return_value = None
    monkeypatch.setattr(
        "bot.help.router.ChatActionSender.typing", MagicMock(return_value=fake_ctx)
    )

    expected_keyboard = device_keyboard()
    assert isinstance(expected_keyboard, InlineKeyboardMarkup)
    # --- Act ---
    await help_cmd(message, fake_state)

    # --- Assert ---
    fake_state.set_state.assert_any_await(HelpStates.cmd_help)
    fake_state.set_state.assert_any_await(HelpStates.device_state)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    message.answer.assert_any_await(
        "üöÄ –°—É–ø–µ—Ä, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç",
        reply_markup=ANY,
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    message.answer.assert_any_await(
        "–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        reply_markup=expected_keyboard,
    )
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º —Å–æ—Å—Ç–∞–≤ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    buttons = [btn for row in expected_keyboard.inline_keyboard for btn in row]
    texts = [b.text for b in buttons]
    callbacks = [b.callback_data for b in buttons]

    assert texts == ["üì± Android", "üçè iOS", "üíª Windows / Linux", "üì∫ Smart TV"]
    assert callbacks == ["device_android", "device_ios", "device_pc", "device_tv"]


@pytest.mark.asyncio
@pytest.mark.parametrize(
    "device_name,device_class",
    [
        ("android", "AndroidDevice"),
        ("ios", "IphoneDevice"),
        ("pc", "PCDevice"),
        ("tv", "TVDevice"),
    ],
)
async def test_device_cb(monkeypatch, fake_bot, device_name, device_class, fake_state):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω—É–∂–Ω—ã–π –º–µ—Ç–æ–¥ .send_message()."""

    call = AsyncMock(spec=CallbackQuery)
    call.message = MagicMock()
    call.data = f"device_{device_name}"
    call.message.chat.id = 999
    call.answer = AsyncMock()

    # state = AsyncMock()

    fake_ctx = AsyncMock()
    fake_ctx.__aenter__.return_value = None
    fake_ctx.__aexit__.return_value = None
    monkeypatch.setattr(
        "bot.help.router.ChatActionSender.typing", MagicMock(return_value=fake_ctx)
    )
    monkeypatch.setattr("bot.help.router.bot", fake_bot)

    fake_device_cls = AsyncMock()
    monkeypatch.setattr(f"bot.help.router.{device_class}", fake_device_cls)

    await device_cb(call, fake_state)

    call.answer.assert_awaited_once_with(
        text=f"–¢—ã –≤—ã–±—Ä–∞–ª {device_name}", show_alert=False
    )
    fake_device_cls.send_message.assert_awaited_once_with(
        fake_bot, call.message.chat.id
    )
    fake_state.clear.assert_awaited_once()


@pytest.mark.asyncio
@pytest.mark.parametrize(
    "device_class, media_dir, msg_key",
    [
        (AndroidDevice, "amnezia_android", "android"),
        (IphoneDevice, "amnezia_iphone", "iphone"),
        (PCDevice, "amnezia_pc", "pc"),
        (TVDevice, "amnezia_wg", "tv"),
    ],
)
async def test_device_send_message(
    monkeypatch, fake_bot, tmp_path, device_class, media_dir, msg_key
):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –∫–ª–∞—Å—Å—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —Å–æ–æ–±—â–µ–Ω–∏—è."""

    # --- Arrange ---
    # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —Ñ–∞–π–ª–∞–º–∏
    media_dir_path = tmp_path / "bot" / "help" / "media" / media_dir
    media_dir_path.mkdir(parents=True)
    (media_dir_path / "1.png").write_text("fake image")
    (media_dir_path / "2.png").write_text("fake image")

    messages = {
        "modes": {
            "help": {
                "instructions": {
                    msg_key: ["–®–∞–≥ 1", "–®–∞–≥ 2"],
                }
            }
        }
    }

    # –ú–æ–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã
    monkeypatch.setattr("bot.config.settings_bot.BASE_DIR", tmp_path)
    monkeypatch.setattr("bot.config.settings_bot.MESSAGES", messages)
    monkeypatch.setattr(
        f"bot.help.utils.{msg_key}_device.settings_bot",
        MagicMock(BASE_DIR=tmp_path, MESSAGES=messages),
    )

    fake_file = MagicMock()
    monkeypatch.setattr("aiogram.types.FSInputFile", MagicMock(return_value=fake_file))
    monkeypatch.setattr("asyncio.sleep", AsyncMock())

    chat_id = 777
    fake_bot.send_photo = AsyncMock()

    # --- Act ---
    await device_class.send_message(fake_bot, chat_id)

    # --- Assert ---
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ send_photo –≤—ã–∑—ã–≤–∞–ª—Å—è —Å—Ç–æ–ª—å–∫–æ –∂–µ —Ä–∞–∑, —Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤
    assert fake_bot.send_photo.await_count == 2

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏
    calls = fake_bot.send_photo.await_args_list
    captions = [c.kwargs["caption"] for c in calls]
    assert captions == ["–®–∞–≥ 1", "–®–∞–≥ 2"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat_id
    for c in calls:
        assert c.kwargs["chat_id"] == chat_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ sleep –±—ã–ª –≤—ã–∑–≤–∞–Ω –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    asyncio.sleep.assert_awaited()


@pytest.mark.asyncio
async def test_device_send_message_raises_file_not_found(tmp_path):
    # —Å–æ–∑–¥–∞—ë–º –º–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settings_mock = SimpleNamespace(
        BASE_DIR=tmp_path,
        MESSAGES={"modes": {"help": {"instructions": {"android": ["—Ç–µ—Å—Ç"]}}}},
    )

    fake_bot = AsyncMock()

    # –ü–∞—Ç—á–∏–º settings_bot —Ç–∞–º, –≥–¥–µ –æ–Ω —Ä–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    with patch("bot.help.utils.android_device.settings_bot", settings_mock):
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AndroidDevice –ø–æ—Å–ª–µ –ø–∞—Ç—á–∞
        from bot.help.utils.android_device import AndroidDevice

        expected_dir = tmp_path / "bot" / "help" / "media" / "amnezia_android"
        assert not expected_dir.exists()  # —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∏ –Ω–µ—Ç

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è FileNotFoundError
        with pytest.raises(FileNotFoundError) as exc_info:
            await AndroidDevice.send_message(fake_bot, 999)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å —É–∫–∞–∑–∞–Ω –≤ –æ—à–∏–±–∫–µ
        assert str(expected_dir) in str(exc_info.value)
