from unittest.mock import ANY, AsyncMock, patch

import pytest
from aiogram.exceptions import TelegramBadRequest

from bot.config import settings_bot
from bot.subscription.router import SubscriptionStates


@pytest.mark.asyncio
@pytest.mark.subscription
async def test_start_subscription(fake_message, fake_state, fake_bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏."""

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    settings_bot.MESSAGES = {
        "modes": {
            "subscription": {
                "start": (
                    "üíé –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ‚Äî 14 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n"
                    "–ü–æ—Å–ª–µ –Ω–µ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
                    "  ‚Ä¢ 1 –º–µ—Å—è—Ü ‚Äî 70‚ÇΩ\n"
                    "  ‚Ä¢ 3 –º–µ—Å—è—Ü–∞ ‚Äî 160‚ÇΩ\n"
                    "  ‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ ‚Äî 300‚ÇΩ\n"
                    "  ‚Ä¢ 12 –º–µ—Å—è—Ü–µ–≤ ‚Äî 600‚ÇΩ\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç üëá\n"  # <-- –¥–æ–±–∞–≤–ª—è–µ–º \n
                )
            }
        }
    }

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å circular import)
    from bot.subscription.router import start_subscription

    # –ú–æ–∫–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (—á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
    with patch(
        "bot.subscription.router.subscription_options_kb",
        return_value="mocked_keyboard",
    ):
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        await start_subscription(fake_message, fake_state)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    fake_message.answer.assert_awaited_once_with(
        text=settings_bot.MESSAGES["modes"]["subscription"]["start"],
        reply_markup="mocked_keyboard",
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤–µ—Ä–Ω–æ
    fake_state.set_state.assert_awaited_once_with(SubscriptionStates.subscription_start)


@pytest.mark.asyncio
@pytest.mark.subscription
async def test_subscription_selected_paid(fake_state, session):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–±–æ—Ä –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (price != 0)."""

    from bot.subscription.router import m_subscription, subscription_selected

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ CallbackQuery
    fake_query = AsyncMock()
    fake_query.data = "sub_select:3"
    fake_query.from_user.id = 12345
    fake_query.message.chat.id = 12345
    fake_query.message.edit_text = AsyncMock()
    fake_query.answer = AsyncMock()

    # –ú–æ–∫–∞–µ–º payment_confirm_kb
    with patch(
        "bot.subscription.router.payment_confirm_kb",
        return_value="mocked_payment_keyboard",
    ):
        await subscription_selected(
            query=fake_query,
            state=fake_state,
        )

    fake_query.answer.assert_awaited_once_with("–í—ã–±—Ä–∞–ª 3 –º–µ—Å—è—Ü–µ–≤", show_alert=False)
    fake_query.message.edit_text.assert_awaited_once()
    fake_state.set_state.assert_awaited_once_with(SubscriptionStates.select_period)


@pytest.mark.asyncio
@pytest.mark.subscription
async def test_subscription_selected_trial(fake_state, session):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–±–æ—Ä –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (price == 0)."""

    from bot.subscription.router import m_subscription, subscription_selected

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ CallbackQuery
    fake_query = AsyncMock()
    fake_query.data = "sub_select:14"
    fake_query.from_user.id = 12345
    fake_query.message.chat.id = 12345
    fake_query.message.delete = AsyncMock()
    fake_query.answer = AsyncMock()

    # –ú–æ–∫–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    with (
        patch("bot.subscription.router.bot.send_message", new=AsyncMock()) as mock_send,
        patch(
            "bot.subscription.router.SubscriptionDAO.activate_subscription",
            new=AsyncMock(),
        ),
    ):
        await subscription_selected(query=fake_query, state=fake_state)

    fake_query.message.delete.assert_awaited_once()
    mock_send.assert_awaited_once()  # —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    fake_state.clear.assert_awaited_once()


@pytest.mark.asyncio
@pytest.mark.subscription
async def test_user_paid(fake_state):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""

    from bot.subscription.router import m_subscription, user_paid

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ callback
    fake_query = AsyncMock()
    fake_query.data = "sub_paid:3"
    fake_query.from_user.id = 111
    fake_query.from_user.username = "tester"
    fake_query.message.chat.id = 111
    fake_query.message.edit_text = AsyncMock()
    fake_query.answer = AsyncMock()

    # –ü–æ–¥–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    m_subscription["wait_for_paid"] = {
        "user": "–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...",
        "admin": "–ê–¥–º–∏–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –æ–ø–ª–∞—Ç–∏–ª {months} –º–µ—Å. –∑–∞ {price} —Ä—É–±.",
    }

    # –ú–æ–∫–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    with (
        patch(
            "bot.subscription.router.admin_payment_kb", return_value="mocked_admin_kb"
        ),
        patch(
            "bot.subscription.router.send_to_admins", new=AsyncMock()
        ) as mock_send_admins,
    ):
        await user_paid(fake_query, fake_state)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    fake_query.answer.assert_awaited_once()
    fake_query.message.edit_text.assert_awaited_once_with(
        "–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞..."
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    fake_state.set_state.assert_awaited_once_with(SubscriptionStates.wait_for_paid)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—à–ª–æ –∞–¥–º–∏–Ω–∞–º
    mock_send_admins.assert_awaited_once()
    args, kwargs = mock_send_admins.await_args
    assert kwargs["telegram_id"] == 111
    assert "–æ–ø–ª–∞—Ç–∏–ª" in kwargs["message_text"]


@pytest.mark.asyncio
@pytest.mark.subscription
async def test_cancel_subscription_from_select_period(fake_state):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–º–µ–Ω—É –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ (–≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É)."""

    from bot.subscription.router import cancel_subscription

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ CallbackQuery
    fake_query = AsyncMock()
    fake_query.message.chat.id = 1001
    fake_query.from_user.id = 1001
    fake_query.answer = AsyncMock()
    fake_query.message.edit_text = AsyncMock()

    # FSM –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "select_period"
    fake_state.get_state = AsyncMock(
        return_value=SubscriptionStates.select_period.state
    )

    with patch(
        "bot.subscription.router.subscription_options_kb",
        return_value="mocked_keyboard",
    ):
        await cancel_subscription(fake_query, fake_state)

    fake_query.answer.assert_awaited_once_with("–û—Ç–º–µ–Ω–µ–Ω–æ ‚ùå", show_alert=False)
    fake_query.message.edit_text.assert_awaited_once_with(
        text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ‚è™",
        reply_markup="mocked_keyboard",
    )
    fake_state.set_state.assert_awaited_once_with(SubscriptionStates.subscription_start)


@pytest.mark.asyncio
@pytest.mark.subscription
async def test_cancel_subscription_to_main_menu(fake_state):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–º–µ–Ω—É —Å –≤—ã—Ö–æ–¥–æ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)."""

    from bot.subscription.router import cancel_subscription

    fake_query = AsyncMock()
    fake_query.message.chat.id = 2002
    fake_query.from_user.id = 2002
    fake_query.answer = AsyncMock()
    fake_query.message.delete = AsyncMock()

    fake_state.get_state = AsyncMock(return_value=None)

    with (
        patch("bot.subscription.router.bot.send_message", new=AsyncMock()) as mock_send,
        patch("bot.subscription.router.main_kb", return_value="mocked_main_kb"),
    ):
        await cancel_subscription(fake_query, fake_state)

    fake_query.message.delete.assert_awaited_once()
    mock_send.assert_awaited_once_with(
        chat_id=2002,
        text="–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏.",
        reply_markup="mocked_main_kb",
    )
    fake_state.clear.assert_awaited_once()


@pytest.mark.asyncio
@pytest.mark.subscription
async def test_admin_confirm_payment_success(session, fake_state):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""

    from bot.subscription.router import admin_confirm_payment

    fake_query = AsyncMock()
    fake_query.data = "admin_confirm:999:3"
    fake_query.message.chat.id = 111
    fake_query.message.edit_text = AsyncMock()
    fake_query.answer = AsyncMock()
    fake_query.bot.send_message = AsyncMock()

    # –ú–æ–∫–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    with (
        patch(
            "bot.subscription.router.SubscriptionDAO.activate_subscription",
            new=AsyncMock(),
        ) as mock_activate,
        patch(
            "bot.subscription.router.edit_admin_messages",
            new=AsyncMock(),
        ) as mock_edit,
    ):
        await admin_confirm_payment(query=fake_query, state=fake_state)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω
    fake_query.answer.assert_awaited_once_with(
        "–ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É", show_alert=False
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑–≤–∞–Ω DAO –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    mock_activate.assert_awaited_once()
    args, kwargs = mock_activate.await_args
    assert kwargs["stelegram_id"].telegram_id == 999
    assert kwargs["month"] == 3

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    fake_query.bot.send_message.assert_awaited_once_with(
        chat_id=999,
        text="‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –º–µ—Å. —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –°–ø–∞—Å–∏–±–æ ‚ù§Ô∏è",
        reply_markup=ANY,
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è —É –∞–¥–º–∏–Ω–æ–≤
    mock_edit.assert_awaited_once()


@pytest.mark.asyncio
@pytest.mark.subscription
async def test_admin_confirm_payment_user_message_fail(session, fake_state):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å."""

    from bot.subscription.router import admin_confirm_payment

    fake_query = AsyncMock()
    fake_query.data = "admin_confirm:777:6"
    fake_query.message.chat.id = 111
    fake_query.answer = AsyncMock()
    fake_query.bot.send_message = AsyncMock(
        side_effect=TelegramBadRequest(
            method="sendMessage",
            message="can't send",
        )
    )
    fake_query.message.edit_text = AsyncMock()

    with (
        patch(
            "bot.subscription.router.SubscriptionDAO.activate_subscription",
            new=AsyncMock(),
        ),
        patch(
            "bot.subscription.router.send_to_admins",
            new=AsyncMock(),
        ) as mock_send_admins,
        patch(
            "bot.subscription.router.edit_admin_messages",
            new=AsyncMock(),
        ),
    ):
        await admin_confirm_payment(query=fake_query, state=fake_state)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –∞–¥–º–∏–Ω—ã
    mock_send_admins.assert_awaited_once()
    args, kwargs = mock_send_admins.await_args
    assert "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å" in kwargs["message_text"]


@pytest.mark.asyncio
@pytest.mark.subscription
async def test_admin_decline_payment_success(fake_state):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã."""

    from bot.subscription.router import admin_decline_payment

    fake_query = AsyncMock()
    fake_query.data = "admin_decline:123:3"
    fake_query.message.chat.id = 111
    fake_query.from_user.id = 123
    fake_query.answer = AsyncMock()
    fake_query.bot.send_message = AsyncMock()

    with patch(
        "bot.subscription.router.edit_admin_messages", new=AsyncMock()
    ) as mock_edit:
        await admin_decline_payment(fake_query, fake_state)

    fake_query.answer.assert_awaited_once_with("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ üö´")
    fake_query.bot.send_message.assert_awaited_once_with(
        chat_id=123,
        text="‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
        reply_markup=ANY,  # –∏–ª–∏ –∏–∑ unittest.mock import ANY
    )
    mock_edit.assert_awaited_once()


@pytest.mark.asyncio
@pytest.mark.subscription
async def test_admin_decline_payment_user_message_fail(fake_state):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å."""

    from bot.subscription.router import admin_decline_payment

    fake_query = AsyncMock()
    fake_query.data = "admin_decline:456:6"
    fake_query.message.chat.id = 111
    fake_query.from_user.id = 456
    fake_query.answer = AsyncMock()
    fake_query.bot.send_message = AsyncMock(
        side_effect=TelegramBadRequest(method="sendMessage", message="can't send")
    )

    with patch(
        "bot.subscription.router.edit_admin_messages", new=AsyncMock()
    ) as mock_edit:
        await admin_decline_payment(fake_query, fake_state)

    fake_query.answer.assert_awaited_once_with("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ üö´")
    fake_query.bot.send_message.assert_awaited_once()
    mock_edit.assert_awaited_once()
