from aiogram import F
from aiogram.dispatcher.router import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove
from aiogram.utils.chat_action import ChatActionSender

from bot.config import bot, settings_bot
from bot.help.keyboards.inline_kb import device_keyboard
from bot.help.utils.android_device import AndroidDevice
from bot.help.utils.iphone_device import IphoneDevice
from bot.help.utils.pc_device import PCDevice
from bot.help.utils.tv_device import TVDevice

help_router = Router()

m_help = settings_bot.MESSAGES["modes"]["help"]


class HelpStates(StatesGroup):  # type: ignore[misc]
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help."""

    cmd_help: State = State()
    device_state: State = State()


@help_router.message(Command("help"))  # type: ignore
@help_router.message(F.text.contains("‚ùì –ü–æ–º–æ—â—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN"))  # type: ignore[misc]
async def help_cmd(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä–≤—ã–π –±–ª–æ–∫ –ø–æ–º–æ—â–∏.

    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –ø–æ—Å–ª–µ —á–µ–≥–æ
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    """
    await state.set_state(HelpStates.cmd_help)
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await message.answer(
            "üöÄ –°—É–ø–µ—Ä, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç", reply_markup=ReplyKeyboardRemove()
        )
        for mess in m_help["start_block"]:
            if mess == m_help["start_block"][-1]:
                await message.answer(mess, reply_markup=device_keyboard())
            else:
                await message.answer(mess)
    await state.set_state(HelpStates.device_state)


@help_router.callback_query(F.data.startswith("device_"), HelpStates.device_state)  # type: ignore[misc]
async def device_cb(call: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ (Android, iOS, PC, TV)
    –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.
    –û—á–∏—â–∞–µ—Ç—Å—è FSM

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    """
    async with ChatActionSender.typing(bot=bot, chat_id=call.message.chat.id):
        call_device = call.data.replace("device_", "")
        await call.answer(text=f"–¢—ã –≤—ã–±—Ä–∞–ª {call_device}", show_alert=False)
        if call_device == "android":
            await AndroidDevice.send_message(bot, call.message.chat.id)
        elif call_device == "ios":
            await IphoneDevice.send_message(bot, call.message.chat.id)
        elif call_device == "pc":
            await PCDevice.send_message(bot, call.message.chat.id)
        elif call_device == "tv":
            await TVDevice.send_message(bot, call.message.chat.id)
        await state.clear()
