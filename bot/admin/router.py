from __future__ import annotations

import datetime
from typing import TYPE_CHECKING, List

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery
from aiogram.utils.chat_action import ChatActionSender
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload

from bot.admin.keyboards.inline_kb import (
    AdminCB,
    UserPageCB,
    admin_user_control_kb,
    role_selection_kb,
    subscription_selection_kb,
    user_navigation_kb,
)
from bot.config import bot
from bot.database import connection
from bot.users.dao import RoleDAO, UserDAO

if TYPE_CHECKING:
    from bot.users.models import User

from bot.users.router import m_admin
from bot.users.schemas import SRole, SUserTelegramID

admin_router = Router()


class AdminStates(StatesGroup):  # type: ignore[misc]
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""

    select_role: State = State()
    select_period: State = State()


async def _get_users_by_filter(session: AsyncSession, filter_type: str) -> List[User]:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ñ–∏–ª—å—Ç—Ä—É."""
    from bot.users.models import Role, User, UserRole

    stmt = (
        select(User)
        .join(User.user_roles)
        .join(UserRole.role)
        .options(selectinload(User.user_roles).selectinload(UserRole.role))
    )
    if filter_type != "all":
        stmt = stmt.where(Role.name == filter_type)

    result = await session.execute(stmt)
    return list(result.scalars().all())


async def _format_user_text(user: User, key: str = "user") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è."""
    template: str = m_admin[key]
    return template.format(
        first_name=user.first_name or "-",
        last_name=user.last_name or "-",
        username=user.username or "-",
        telegram_id=user.telegram_id or "-",
        roles=",".join([str(role) for role in user.roles]) if user.roles else "-",
        subscription=user.subscription or "-",
    )


@admin_router.callback_query(UserPageCB.filter(F.action == "role_change"))  # type: ignore[misc]
@admin_router.callback_query(UserPageCB.filter(F.action == "sub_manage"))  # type: ignore[misc]
@connection()
async def admin_action_callback(
    query: CallbackQuery,
    state: FSMContext,
    session: AsyncSession,
    callback_data: UserPageCB,
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è (`role_change` –∏–ª–∏ `sub_manage`),
    –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é —Ä–æ–ª—å –∏–ª–∏ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏.

    Args:
        query (CallbackQuery): –û–±—ä–µ–∫—Ç –∫–æ–ª–±—ç–∫–∞.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM.
        session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        callback_data (UserPageCB | None): –î–∞–Ω–Ω—ã–µ –∏–∑ callback –∫–Ω–æ–ø–∫–∏.

    """
    async with ChatActionSender.typing(bot=bot, chat_id=query.from_user.id):
        await query.answer("–û—Ç—Ä–∞–±–æ—Ç–∞–ª")
        user_id: int | None = callback_data.telegram_id
        if user_id is None:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –∑–∞–ø—Ä–æ—Å telegram_id")
        user_schema = SUserTelegramID(telegram_id=user_id)
        user = await UserDAO.find_one_or_none(session=session, filters=user_schema)
        if user is None:
            raise ValueError(f"–ù–µ –Ω–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º telegram_id {user_id}")
        old_text = await _format_user_text(user, "edit_user")
        if callback_data.action == "role_change":
            await state.set_state(AdminStates.select_role)
            await query.message.edit_text(
                f"{old_text}\n {'*' * 20}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                reply_markup=role_selection_kb(
                    filter_type=callback_data.filter_type,
                    index=callback_data.index,
                    telegram_id=user_id,
                ),
            )
        elif callback_data.action == "sub_manage":
            await state.set_state(AdminStates.select_period)
            await query.message.edit_text(
                f"{old_text}\n{'*' * 20}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                reply_markup=subscription_selection_kb(
                    filter_type=callback_data.filter_type,
                    index=callback_data.index,
                    telegram_id=user_id,
                ),
            )


@admin_router.callback_query(
    AdminStates.select_role, UserPageCB.filter(F.action == "role_select")
)  # type: ignore[misc]
@connection()
async def role_select_callback(
    query: CallbackQuery, callback_data: UserPageCB, session: AsyncSession
) -> None:
    """–ò–∑–º–µ–Ω—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        query (CallbackQuery): –û–±—ä–µ–∫—Ç –∫–æ–ª–±—ç–∫–∞.
        callback_data (UserPageCB): –î–∞–Ω–Ω—ã–µ –∏–∑ callback –∫–Ω–æ–ø–∫–∏.
        session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    Raises
        ValueError: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.

    """
    async with ChatActionSender.typing(bot=bot, chat_id=query.from_user.id):
        role_name = callback_data.filter_type
        user_id = callback_data.telegram_id
        if user_id is None:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –∑–∞–ø—Ä–æ—Å telegram_id")
        user_schema = SUserTelegramID(telegram_id=int(user_id))
        user = await UserDAO.find_one_or_none(session=session, filters=user_schema)
        user_id = int(user_id)
        role_schema = SRole(name=role_name)
        role = await RoleDAO.find_one_or_none(session, filters=role_schema)
        if user is None or role is None:
            raise ValueError(
                f"–ù–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—Ä–æ–ª—å ({user_id}/{role_name})"
            )
        user.roles = [role]
        if role.name == "founder":
            if datetime.datetime.now().year == 2025:
                current_date = datetime.datetime.now(tz=datetime.timezone.utc)
                new_user = datetime.datetime(2026, 1, 1, tzinfo=datetime.timezone.utc)
                delta = new_user - current_date
                user.subscription.activate(days=delta.days)

        await session.flush([user, user.subscription])
        await session.commit()
        old_text = await _format_user_text(user, "edit_user")
        await query.message.edit_text(
            f"{old_text}\n{'*' * 20}\n–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {role_name} ‚úÖ",
            reply_markup=user_navigation_kb(
                filter_type=role_name,
                index=callback_data.index,
                total=0,
                telegram_id=user.telegram_id,
            ),
        )


@admin_router.callback_query(UserPageCB.filter(F.action == "sub_select"))  # type: ignore[misc]
@connection()
async def sub_select_callback(
    query: CallbackQuery, session: AsyncSession, callback_data: UserPageCB
) -> None:
    """–ò–∑–º–µ–Ω—è–µ—Ç —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        query (CallbackQuery): –û–±—ä–µ–∫—Ç –∫–æ–ª–±—ç–∫–∞.
        session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        callback_data (UserPageCB): –î–∞–Ω–Ω—ã–µ –∏–∑ callback –∫–Ω–æ–ø–∫–∏.

    Raises
        ValueError: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.

    """
    async with ChatActionSender.typing(bot=bot, chat_id=query.from_user.id):
        months = callback_data.month
        user_id = callback_data.telegram_id
        if user_id is None or months is None:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –∑–∞–ø—Ä–æ—Å telegram_id/month")
        user_schema = SUserTelegramID(telegram_id=int(user_id))
        user = await UserDAO.find_one_or_none(session=session, filters=user_schema)
        if user is None:
            raise ValueError(f"–ù–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è({user_id}")
        months = int(months)
        subscription = user.subscription
        if subscription.is_active:
            subscription.extend(months=months)
        await session.flush(
            [
                user,
            ]
        )
        await session.commit()
        old_text = await _format_user_text(user, "edit_user")
        if subscription.is_active:
            await query.message.edit_text(
                f"{old_text}\n"
                f"{'*' * 10}\n"
                f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {months} –º–µ—Å—è—Ü(–µ–≤) ‚úÖ",
                reply_markup=admin_user_control_kb(
                    filter_type=callback_data.filter_type,
                    index=callback_data.index,
                    telegram_id=user_id,
                ),
            )
        else:
            await query.message.edit_text(
                f"{old_text}\n{'*' * 10}\n–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ üîí",
                reply_markup=admin_user_control_kb(
                    filter_type=callback_data.filter_type,
                    index=callback_data.index,
                    telegram_id=user_id,
                ),
            )


@admin_router.callback_query(UserPageCB.filter(F.action == "role_cancel"))  # type: ignore[misc]
@admin_router.callback_query(UserPageCB.filter(F.action == "subscr_cancel"))  # type: ignore[misc]
@connection()
async def cansel_callback(
    query: CallbackQuery, session: AsyncSession, callback_data: UserPageCB
) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤—ã–±–æ—Ä —Ä–æ–ª–∏ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

    Args:
        query (CallbackQuery): –û–±—ä–µ–∫—Ç –∫–æ–ª–±—ç–∫–∞.
        session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        callback_data (UserPageCB): –î–∞–Ω–Ω—ã–µ –∏–∑ callback –∫–Ω–æ–ø–∫–∏.

    """
    async with ChatActionSender.typing(bot=bot, chat_id=query.from_user.id):
        await query.answer()
        user_id = callback_data.telegram_id
        old_text = query.message.text
        users = await _get_users_by_filter(session, callback_data.filter_type)
        await query.message.edit_text(
            text=old_text,
            reply_markup=user_navigation_kb(
                filter_type=callback_data.filter_type,
                index=callback_data.index,
                total=len(users),
                telegram_id=user_id,
            ),
        )


@admin_router.callback_query(AdminCB.filter())  # type: ignore[misc]
@connection()
async def show_filtered_users(
    query: CallbackQuery, callback_data: AdminCB, session: AsyncSession
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω—ã, founder –∏ —Ç.–¥.).

    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.

    Args:
        query (CallbackQuery): –û–±—ä–µ–∫—Ç –∫–æ–ª–±—ç–∫–∞.
        callback_data (AdminCB): –î–∞–Ω–Ω—ã–µ callback-–∫–Ω–æ–ø–∫–∏.
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    """
    async with ChatActionSender.typing(bot=bot, chat_id=query.from_user.id):
        await query.answer()
        users = await _get_users_by_filter(session, callback_data.filter_type)

        if not users:
            await query.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        user = users[0]
        user_text = await _format_user_text(user)
        text = f"{user_text}\n\n –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 –∏–∑ {len(users)}"

        kb = user_navigation_kb(
            filter_type=callback_data.filter_type,
            index=0,
            total=len(users),
            telegram_id=user.telegram_id,
        )
        await query.message.edit_text(text, reply_markup=kb)


@admin_router.callback_query(UserPageCB.filter(F.action == "navigate"))  # type: ignore[misc]
@connection()
async def user_page_callback(
    query: CallbackQuery, callback_data: UserPageCB, session: AsyncSession
) -> None:
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É.

    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ñ–∏–ª—å—Ç—Ä—É –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.

    Args:
        query (CallbackQuery): –û–±—ä–µ–∫—Ç –∫–æ–ª–±—ç–∫–∞.
        callback_data (UserPageCB): –î–∞–Ω–Ω—ã–µ callback-–∫–Ω–æ–ø–∫–∏.
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    """
    async with ChatActionSender.typing(bot=bot, chat_id=query.from_user.id):
        await query.answer()
        users = await _get_users_by_filter(session, callback_data.filter_type)

        if not users:
            await query.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        index = min(callback_data.index, len(users) - 1)
        user = users[index]
        user_text = await _format_user_text(user)
        text = f"{user_text}\n\n –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {index + 1} –∏–∑ {len(users)}"

        kb = user_navigation_kb(
            callback_data.filter_type, index, len(users), user.telegram_id
        )
        await query.message.edit_text(text, reply_markup=kb)
