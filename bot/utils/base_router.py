import asyncio
import functools
from abc import ABC, abstractmethod
from collections.abc import Callable
from typing import Any, TypeVar

from aiogram import Bot, Router
from loguru._logger import Logger

T = TypeVar("T")
F = TypeVar("F", bound=Callable[..., Any])
SelfT = TypeVar("SelfT", bound="BaseRouter")


class BaseRouter(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""

    def __init__(self, bot: Bot, logger: Logger) -> None:
        self.bot = bot
        self.router = Router(name=self.__class__.__name__)
        self.logger = logger
        self._register_handlers()

    @abstractmethod
    def _register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ —Ä–æ—É—Ç–µ—Ä–∞."""
        pass

    @staticmethod
    def log_method(func: F) -> F:
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞."""
        if asyncio.iscoroutinefunction(func):
            # –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
            @functools.wraps(func)
            async def async_wrapper(self: SelfT, *args: Any, **kwargs: Any) -> Any:
                self.logger.info(
                    f"üöÄ –ù–∞—á–∞–ª–æ: {self.__class__.__name__}.{func.__name__}"
                )
                try:
                    result = await func(self, *args, **kwargs)
                    self.logger.info(
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {self.__class__.__name__}.{func.__name__}"
                    )
                    return result
                except Exception as e:
                    self.logger.exception(
                        f"‚ùå –û—à–∏–±–∫–∞ –≤ {self.__class__.__name__}.{func.__name__}: {e}"
                    )
                    raise

            return async_wrapper  # type: ignore[return-value]

        else:
            # –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
            @functools.wraps(func)
            def sync_wrapper(self: SelfT, *args: Any, **kwargs: Any) -> Any:
                self.logger.info(
                    f"üöÄ –ù–∞—á–∞–ª–æ: {self.__class__.__name__}.{func.__name__}"
                )
                try:
                    result = func(self, *args, **kwargs)
                    self.logger.info(
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {self.__class__.__name__}.{func.__name__}"
                    )
                    return result
                except Exception as e:
                    self.logger.exception(
                        f"‚ùå –û—à–∏–±–∫–∞ –≤ {self.__class__.__name__}.{func.__name__}: {e}"
                    )
                    raise

            return sync_wrapper  # type: ignore[return-value]
