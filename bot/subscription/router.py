from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from aiogram.utils.chat_action import ChatActionSender
from sqlalchemy.ext.asyncio import AsyncSession

from bot.config import bot, settings_bot
from bot.database import connection
from bot.redis_manager import redis_manager
from bot.subscription.dao import SubscriptionDAO
from bot.subscription.keyboards.inline_kb import (
    admin_payment_kb,
    payment_confirm_kb,
    subscription_options_kb,
)
from bot.users.keyboards.markup_kb import main_kb
from bot.users.schemas import SUserTelegramID
from bot.utils.start_stop_bot import edit_admin_messages, send_to_admins

subscription_router = Router()

m_subscription = settings_bot.MESSAGES["modes"]["subscription"]


class SubscriptionStates(StatesGroup):  # type: ignore[misc]
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏."""

    subscription_start: State = State()
    select_period: State = State()
    wait_for_paid: State = State()


@subscription_router.message(F.text == "üí∞ –í—ã–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É VPN-Boriska")  # type: ignore[misc]
async def start_subscription(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–≤—à–µ–≥–æ –ø–æ–¥–ø–∏—Å–∫—É.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.

    """
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await message.answer(
            text=m_subscription["start"], reply_markup=subscription_options_kb()
        )
        await state.set_state(SubscriptionStates.subscription_start)


@subscription_router.callback_query(
    SubscriptionStates.subscription_start, lambda c: c.data.startswith("sub_select:")
)  # type: ignore[misc]
@connection()
async def subscription_selected(
    query: CallbackQuery, state: FSMContext, session: AsyncSession
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã
        query (CallbackQuery): Callback –æ—Ç Inline-–∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–¥–ø–∏—Å–∫–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.

    """
    async with ChatActionSender.typing(bot=bot, chat_id=query.message.chat.id):
        months = int(query.data.split(":")[1])
        await query.answer(f"–í—ã–±—Ä–∞–ª {months} –º–µ—Å—è—Ü–µ–≤", show_alert=False)
        price_map = {
            1: 70,
            3: 160,
            6: 300,
            12: 600,
            14: 0,
        }
        price = price_map[months]
        if price != 0:
            await query.message.edit_text(
                text=m_subscription["select_period"].format(
                    months=months,
                    price=price,
                ),
                reply_markup=payment_confirm_kb(months),
            )
            await state.set_state(SubscriptionStates.select_period)
        else:
            await query.message.delete()
            await bot.send_message(
                chat_id=query.from_user.id,
                text=m_subscription["trial_period"],
                reply_markup=main_kb(active_subscription=True),
            )
            schema_user = SUserTelegramID(telegram_id=query.from_user.id)
            trial_days = months
            await SubscriptionDAO.activate_subscription(
                session=session, stelegram_id=schema_user, days=trial_days
            )
            await state.clear()


@subscription_router.callback_query(
    SubscriptionStates.select_period, lambda c: c.data.startswith("sub_paid:")
)  # type: ignore[misc]
async def user_paid(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–ª–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã
        query (CallbackQuery): Callback –æ—Ç Inline-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.

    """
    async with ChatActionSender.typing(bot=bot, chat_id=query.message.chat.id):
        await query.answer()
        await state.set_state(SubscriptionStates.wait_for_paid)
        months = int(query.data.split(":")[1])
        price_map = {1: 70, 3: 160, 6: 300, 12: 600}
        price = price_map[months]
        user = query.from_user

        await query.message.edit_text(m_subscription["wait_for_paid"]["user"])

        admin_message = m_subscription["wait_for_paid"]["admin"].format(
            username=user.username or "-",
            user_id=user.id or "-",
            months=months,
            price=price,
        )
        await send_to_admins(
            bot=bot,
            message_text=admin_message,
            reply_markup=admin_payment_kb(user.id, months),
            redis_manager=redis_manager,
            telegram_id=user.id,
        )


@subscription_router.callback_query(F.data == "sub_cancel")  # type: ignore[misc]
async def cancel_subscription(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã
        query (CallbackQuery): Callback –æ—Ç –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞".
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.

    """
    async with ChatActionSender.typing(bot=bot, chat_id=query.message.chat.id):
        current_state = await state.get_state()
        await query.answer("–û—Ç–º–µ–Ω–µ–Ω–æ ‚ùå", show_alert=False)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Ç–æ—Ä–æ–º —à–∞–≥–µ ‚Üí –≤–µ—Ä–Ω—É—Ç—å –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞
        if current_state == SubscriptionStates.select_period.state:
            await query.message.edit_text(
                text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ‚è™",
                reply_markup=subscription_options_kb(),
            )
            await state.set_state(SubscriptionStates.subscription_start)
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ –∏–ª–∏ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Üí –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await query.message.delete()
        await bot.send_message(
            chat_id=query.from_user.id,
            text="–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏.",
            reply_markup=main_kb(),
        )
        await state.clear()


@subscription_router.callback_query(F.data.startswith("admin_confirm:"))  # type: ignore[misc]
@connection()
async def admin_confirm_payment(
    query: CallbackQuery, session: AsyncSession, state: FSMContext
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã
        query (CallbackQuery): Callback –æ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º.
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.

    """
    async with ChatActionSender.typing(
        bot=bot,
        chat_id=query.message.chat.id,
    ):
        await query.answer("–ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É", show_alert=False)
        _, user_id, months = query.data.split(":")
        user_id = int(user_id)
        months = int(months)
        schema_user = SUserTelegramID(telegram_id=user_id)
        await SubscriptionDAO.activate_subscription(
            session=session, stelegram_id=schema_user, month=months
        )

        try:
            await query.bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {months} –º–µ—Å. —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –°–ø–∞—Å–∏–±–æ ‚ù§Ô∏è",
                reply_markup=main_kb(active_subscription=True),
            )
        except TelegramBadRequest:
            await send_to_admins(
                bot=bot,
                message_text=f"‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏èÔ∏èÔ∏è–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å "
                f"—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ({user_id}) "
                f"–æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è",
            )

        await edit_admin_messages(
            bot=bot,
            user_id=user_id,
            new_text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.",
            redis_manager=redis_manager,
        )


@subscription_router.callback_query(F.data.startswith("admin_decline:"))  # type: ignore[misc]
async def admin_decline_payment(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã
        query (CallbackQuery): Callback –æ—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.

    """
    async with ChatActionSender.typing(
        bot=bot,
        chat_id=query.message.chat.id,
    ):
        await query.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ üö´")
        _, user_id, months = query.data.split(":")
        user_id = int(user_id)
        months = int(months)

        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await query.bot.send_message(
                chat_id=user_id,
                text="‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                reply_markup=main_kb(active_subscription=False),
            )
        except TelegramBadRequest:
            pass
        await edit_admin_messages(
            bot=bot,
            user_id=user_id,
            new_text=f"üö´ –û–ø–ª–∞—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code> –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
            redis_manager=redis_manager,
        )
