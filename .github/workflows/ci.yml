name: CI

on:
  pull_request:
    types: [ opened, reopened ]
  push:
    branches: [ main, develop, settings ]

jobs:
  lint:
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.12", "3.13" ]
        poetry-version: [ "latest", "main", "1.8.0" ]
        os: [ ubuntu-latest, ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Poetry
        uses: abatilo/actions-poetry@v4
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: View poetry --help
        run: poetry --help
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          poetry install --no-root --with dev
      - name: Run Black
        run: poetry run black --check .
      - name: Run isort
        run: poetry run isort --check-only --profile black .
      - name: Run Ruff
        run: poetry run ruff check .

      - name: Run Ruff Format
        run: poetry run ruff format --check .
      - name: Run mypy
        run: poetry run mypy .

  test:
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.12", "3.13" ]
        poetry-version: [ "latest", "main", "1.8.0" ]
        os: [ ubuntu-latest, ]
    runs-on: ${{ matrix.os }}
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Poetry
        uses: abatilo/actions-poetry@v4
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: View poetry --help
        run: poetry --help
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          poetry install --no-root --with dev
      - name: Run tests
        env:
          ENV_FILE: .env.test
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          ADMIN_IDS: ${{ secrets.ADMIN_IDS }}
          BASE_SITE: ${{ secrets.BASE_SITE }}
          USE_POLING: true
          DEBUG_FAST_API: true
          RELOAD_FAST_API: true
          LOGGER_LEVEL_STDOUT: "DEBUG"
          LOGGER_LEVEL_FILE: "DEBUG"
          LOGGER_ERROR_FILE: "WARNING"
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{secrets.DB_PORT }}
          DB_USER: ${{secrets.DB_USER}}
          DB_PASSWORD: ${{secrets.DB_PASSWORD}}
          DB_DATABASE: ${{secrets.DB_DATABASE}}
          REDIS_PASSWORD: ${{secrets.REDIS_PASSWORD}}

        run: poetry run pytest -vs .
