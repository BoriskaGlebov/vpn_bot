name: CI

on:
  pull_request:
    types: [ opened, reopened ]
  push:
    branches: [ main, develop, settings ]

jobs:
  lint:
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.12", "3.13" ]
        poetry-version: [ "latest", "main", "1.8.0" ]
        os: [ ubuntu-latest,]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Poetry
        uses: abatilo/actions-poetry@v4
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: View poetry --help
        run: poetry --help

#      - name: Activate virtualenv
#        run: source $(poetry env info --path)/bin/activate

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          poetry install --no-root --with dev
      - name: Run Black
        run: poetry run black --check .
      - name: Run isort
        run: poetry run isort --check-only --profile black .
      - name: Run Ruff
        run: poetry run ruff check .

      - name: Run Ruff Format
        run: poetry run ruff format --check .

#      - name: Run pydocstyle
#        run: poetry run pydocstyle --ignore=D100,D104,D107,D213,D203,D407 \
#                  --match-dir='^(?!(bot/tests/|bot/migrations/|\.venv/)).*\.py$' .
      - name: Run mypy
        run: poetry run mypy .

#  test:
#    runs-on: ubuntu-latest
#    needs: lint   # тесты запустятся только если линтеры прошли
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Set up Python
#        uses: actions/setup-python@v5
#        with:
#          python-version: "3.11"
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install -r requirements.txt
#          pip install pytest
#
#      - name: Run tests
#        run: pytest -v
